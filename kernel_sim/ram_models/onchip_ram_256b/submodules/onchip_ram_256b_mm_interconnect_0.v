// onchip_ram_256b_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module onchip_ram_256b_mm_interconnect_0 (
		input  wire         clk_0_clk_clk,                                   //                                 clk_0_clk.clk
		input  wire         kernel_bridge_reset_reset_bridge_in_reset_reset, // kernel_bridge_reset_reset_bridge_in_reset.reset
		input  wire [22:0]  host_bridge_1_m0_address,                        //                          host_bridge_1_m0.address
		output wire         host_bridge_1_m0_waitrequest,                    //                                          .waitrequest
		input  wire [0:0]   host_bridge_1_m0_burstcount,                     //                                          .burstcount
		input  wire [3:0]   host_bridge_1_m0_byteenable,                     //                                          .byteenable
		input  wire         host_bridge_1_m0_read,                           //                                          .read
		output wire [31:0]  host_bridge_1_m0_readdata,                       //                                          .readdata
		output wire         host_bridge_1_m0_readdatavalid,                  //                                          .readdatavalid
		input  wire         host_bridge_1_m0_write,                          //                                          .write
		input  wire [31:0]  host_bridge_1_m0_writedata,                      //                                          .writedata
		input  wire         host_bridge_1_m0_debugaccess,                    //                                          .debugaccess
		input  wire [22:0]  kernel_bridge_m0_address,                        //                          kernel_bridge_m0.address
		output wire         kernel_bridge_m0_waitrequest,                    //                                          .waitrequest
		input  wire [4:0]   kernel_bridge_m0_burstcount,                     //                                          .burstcount
		input  wire [31:0]  kernel_bridge_m0_byteenable,                     //                                          .byteenable
		input  wire         kernel_bridge_m0_read,                           //                                          .read
		output wire [255:0] kernel_bridge_m0_readdata,                       //                                          .readdata
		output wire         kernel_bridge_m0_readdatavalid,                  //                                          .readdatavalid
		input  wire         kernel_bridge_m0_write,                          //                                          .write
		input  wire [255:0] kernel_bridge_m0_writedata,                      //                                          .writedata
		input  wire         kernel_bridge_m0_debugaccess,                    //                                          .debugaccess
		output wire [17:0]  onchip_memory2_0_s1_address,                     //                       onchip_memory2_0_s1.address
		output wire         onchip_memory2_0_s1_write,                       //                                          .write
		input  wire [255:0] onchip_memory2_0_s1_readdata,                    //                                          .readdata
		output wire [255:0] onchip_memory2_0_s1_writedata,                   //                                          .writedata
		output wire [31:0]  onchip_memory2_0_s1_byteenable,                  //                                          .byteenable
		output wire         onchip_memory2_0_s1_chipselect,                  //                                          .chipselect
		output wire         onchip_memory2_0_s1_clken                        //                                          .clken
	);

	wire          kernel_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // kernel_bridge_m0_agent:av_waitrequest -> kernel_bridge_m0_translator:uav_waitrequest
	wire  [255:0] kernel_bridge_m0_translator_avalon_universal_master_0_readdata;      // kernel_bridge_m0_agent:av_readdata -> kernel_bridge_m0_translator:uav_readdata
	wire          kernel_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // kernel_bridge_m0_translator:uav_debugaccess -> kernel_bridge_m0_agent:av_debugaccess
	wire   [22:0] kernel_bridge_m0_translator_avalon_universal_master_0_address;       // kernel_bridge_m0_translator:uav_address -> kernel_bridge_m0_agent:av_address
	wire          kernel_bridge_m0_translator_avalon_universal_master_0_read;          // kernel_bridge_m0_translator:uav_read -> kernel_bridge_m0_agent:av_read
	wire   [31:0] kernel_bridge_m0_translator_avalon_universal_master_0_byteenable;    // kernel_bridge_m0_translator:uav_byteenable -> kernel_bridge_m0_agent:av_byteenable
	wire          kernel_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // kernel_bridge_m0_agent:av_readdatavalid -> kernel_bridge_m0_translator:uav_readdatavalid
	wire          kernel_bridge_m0_translator_avalon_universal_master_0_lock;          // kernel_bridge_m0_translator:uav_lock -> kernel_bridge_m0_agent:av_lock
	wire          kernel_bridge_m0_translator_avalon_universal_master_0_write;         // kernel_bridge_m0_translator:uav_write -> kernel_bridge_m0_agent:av_write
	wire  [255:0] kernel_bridge_m0_translator_avalon_universal_master_0_writedata;     // kernel_bridge_m0_translator:uav_writedata -> kernel_bridge_m0_agent:av_writedata
	wire    [9:0] kernel_bridge_m0_translator_avalon_universal_master_0_burstcount;    // kernel_bridge_m0_translator:uav_burstcount -> kernel_bridge_m0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                   // rsp_mux:src_valid -> kernel_bridge_m0_agent:rp_valid
	wire  [351:0] rsp_mux_src_data;                                                    // rsp_mux:src_data -> kernel_bridge_m0_agent:rp_data
	wire          rsp_mux_src_ready;                                                   // kernel_bridge_m0_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                 // rsp_mux:src_channel -> kernel_bridge_m0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                           // rsp_mux:src_startofpacket -> kernel_bridge_m0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                             // rsp_mux:src_endofpacket -> kernel_bridge_m0_agent:rp_endofpacket
	wire          host_bridge_1_m0_translator_avalon_universal_master_0_waitrequest;   // host_bridge_1_m0_agent:av_waitrequest -> host_bridge_1_m0_translator:uav_waitrequest
	wire   [31:0] host_bridge_1_m0_translator_avalon_universal_master_0_readdata;      // host_bridge_1_m0_agent:av_readdata -> host_bridge_1_m0_translator:uav_readdata
	wire          host_bridge_1_m0_translator_avalon_universal_master_0_debugaccess;   // host_bridge_1_m0_translator:uav_debugaccess -> host_bridge_1_m0_agent:av_debugaccess
	wire   [22:0] host_bridge_1_m0_translator_avalon_universal_master_0_address;       // host_bridge_1_m0_translator:uav_address -> host_bridge_1_m0_agent:av_address
	wire          host_bridge_1_m0_translator_avalon_universal_master_0_read;          // host_bridge_1_m0_translator:uav_read -> host_bridge_1_m0_agent:av_read
	wire    [3:0] host_bridge_1_m0_translator_avalon_universal_master_0_byteenable;    // host_bridge_1_m0_translator:uav_byteenable -> host_bridge_1_m0_agent:av_byteenable
	wire          host_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid; // host_bridge_1_m0_agent:av_readdatavalid -> host_bridge_1_m0_translator:uav_readdatavalid
	wire          host_bridge_1_m0_translator_avalon_universal_master_0_lock;          // host_bridge_1_m0_translator:uav_lock -> host_bridge_1_m0_agent:av_lock
	wire          host_bridge_1_m0_translator_avalon_universal_master_0_write;         // host_bridge_1_m0_translator:uav_write -> host_bridge_1_m0_agent:av_write
	wire   [31:0] host_bridge_1_m0_translator_avalon_universal_master_0_writedata;     // host_bridge_1_m0_translator:uav_writedata -> host_bridge_1_m0_agent:av_writedata
	wire    [2:0] host_bridge_1_m0_translator_avalon_universal_master_0_burstcount;    // host_bridge_1_m0_translator:uav_burstcount -> host_bridge_1_m0_agent:av_burstcount
	wire  [255:0] onchip_memory2_0_s1_agent_m0_readdata;                               // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                            // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                            // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [22:0] onchip_memory2_0_s1_agent_m0_address;                                // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire   [31:0] onchip_memory2_0_s1_agent_m0_byteenable;                             // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                   // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                          // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                   // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire  [255:0] onchip_memory2_0_s1_agent_m0_writedata;                              // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                  // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [5:0] onchip_memory2_0_s1_agent_m0_burstcount;                             // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                           // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [352:0] onchip_memory2_0_s1_agent_rf_source_data;                            // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                           // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                   // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                     // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                        // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [352:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                         // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                        // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                  // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          kernel_bridge_m0_agent_cp_valid;                                     // kernel_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [351:0] kernel_bridge_m0_agent_cp_data;                                      // kernel_bridge_m0_agent:cp_data -> router:sink_data
	wire          kernel_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> kernel_bridge_m0_agent:cp_ready
	wire          kernel_bridge_m0_agent_cp_startofpacket;                             // kernel_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          kernel_bridge_m0_agent_cp_endofpacket;                               // kernel_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                    // router:src_valid -> cmd_demux:sink_valid
	wire  [351:0] router_src_data;                                                     // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                    // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                  // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                            // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                              // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          host_bridge_1_m0_agent_cp_valid;                                     // host_bridge_1_m0_agent:cp_valid -> router_001:sink_valid
	wire   [99:0] host_bridge_1_m0_agent_cp_data;                                      // host_bridge_1_m0_agent:cp_data -> router_001:sink_data
	wire          host_bridge_1_m0_agent_cp_ready;                                     // router_001:sink_ready -> host_bridge_1_m0_agent:cp_ready
	wire          host_bridge_1_m0_agent_cp_startofpacket;                             // host_bridge_1_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          host_bridge_1_m0_agent_cp_endofpacket;                               // host_bridge_1_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                  // onchip_memory2_0_s1_agent:rp_valid -> router_002:sink_valid
	wire  [351:0] onchip_memory2_0_s1_agent_rp_data;                                   // onchip_memory2_0_s1_agent:rp_data -> router_002:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                  // router_002:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                          // onchip_memory2_0_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                            // onchip_memory2_0_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                // router_002:src_valid -> rsp_demux:sink_valid
	wire  [351:0] router_002_src_data;                                                 // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                              // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                        // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                          // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                   // cmd_mux:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [351:0] cmd_mux_src_data;                                                    // cmd_mux:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                   // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                 // cmd_mux:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                           // cmd_mux:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                             // cmd_mux:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                     // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [351:0] onchip_memory2_0_s1_burst_adapter_source0_data;                      // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                     // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [1:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                   // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;             // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;               // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [351:0] cmd_demux_src0_data;                                                 // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                              // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                        // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                          // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                            // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [351:0] cmd_demux_001_src0_data;                                             // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                            // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                          // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                    // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                      // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [351:0] rsp_demux_src0_data;                                                 // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                              // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                        // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                          // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [351:0] rsp_demux_src1_data;                                                 // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                              // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                        // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                          // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_mux_001_src_valid;                                               // rsp_mux_001:src_valid -> host_bridge_1_m0_rsp_width_adapter:in_valid
	wire  [351:0] rsp_mux_001_src_data;                                                // rsp_mux_001:src_data -> host_bridge_1_m0_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                               // host_bridge_1_m0_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                             // rsp_mux_001:src_channel -> host_bridge_1_m0_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                       // rsp_mux_001:src_startofpacket -> host_bridge_1_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                         // rsp_mux_001:src_endofpacket -> host_bridge_1_m0_rsp_width_adapter:in_endofpacket
	wire          host_bridge_1_m0_rsp_width_adapter_src_valid;                        // host_bridge_1_m0_rsp_width_adapter:out_valid -> host_bridge_1_m0_agent:rp_valid
	wire   [99:0] host_bridge_1_m0_rsp_width_adapter_src_data;                         // host_bridge_1_m0_rsp_width_adapter:out_data -> host_bridge_1_m0_agent:rp_data
	wire          host_bridge_1_m0_rsp_width_adapter_src_ready;                        // host_bridge_1_m0_agent:rp_ready -> host_bridge_1_m0_rsp_width_adapter:out_ready
	wire    [1:0] host_bridge_1_m0_rsp_width_adapter_src_channel;                      // host_bridge_1_m0_rsp_width_adapter:out_channel -> host_bridge_1_m0_agent:rp_channel
	wire          host_bridge_1_m0_rsp_width_adapter_src_startofpacket;                // host_bridge_1_m0_rsp_width_adapter:out_startofpacket -> host_bridge_1_m0_agent:rp_startofpacket
	wire          host_bridge_1_m0_rsp_width_adapter_src_endofpacket;                  // host_bridge_1_m0_rsp_width_adapter:out_endofpacket -> host_bridge_1_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                // router_001:src_valid -> host_bridge_1_m0_cmd_width_adapter:in_valid
	wire   [99:0] router_001_src_data;                                                 // router_001:src_data -> host_bridge_1_m0_cmd_width_adapter:in_data
	wire          router_001_src_ready;                                                // host_bridge_1_m0_cmd_width_adapter:in_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                              // router_001:src_channel -> host_bridge_1_m0_cmd_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                        // router_001:src_startofpacket -> host_bridge_1_m0_cmd_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                          // router_001:src_endofpacket -> host_bridge_1_m0_cmd_width_adapter:in_endofpacket
	wire          host_bridge_1_m0_cmd_width_adapter_src_valid;                        // host_bridge_1_m0_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [351:0] host_bridge_1_m0_cmd_width_adapter_src_data;                         // host_bridge_1_m0_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          host_bridge_1_m0_cmd_width_adapter_src_ready;                        // cmd_demux_001:sink_ready -> host_bridge_1_m0_cmd_width_adapter:out_ready
	wire    [1:0] host_bridge_1_m0_cmd_width_adapter_src_channel;                      // host_bridge_1_m0_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          host_bridge_1_m0_cmd_width_adapter_src_startofpacket;                // host_bridge_1_m0_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          host_bridge_1_m0_cmd_width_adapter_src_endofpacket;                  // host_bridge_1_m0_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                      // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                       // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                      // avalon_st_adapter:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                       // avalon_st_adapter:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                        // avalon_st_adapter:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                       // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                       // avalon_st_adapter:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (23),
		.AV_DATA_W                   (256),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (32),
		.UAV_ADDRESS_W               (23),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (32),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) kernel_bridge_m0_translator (
		.clk                    (clk_0_clk_clk),                                                       //                       clk.clk
		.reset                  (kernel_bridge_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (kernel_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (kernel_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (kernel_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (kernel_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (kernel_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (kernel_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (kernel_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (kernel_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (kernel_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (kernel_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (kernel_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (kernel_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (kernel_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (kernel_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (kernel_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (kernel_bridge_m0_read),                                               //                          .read
		.av_readdata            (kernel_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (kernel_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (kernel_bridge_m0_write),                                              //                          .write
		.av_writedata           (kernel_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (kernel_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (23),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (23),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) host_bridge_1_m0_translator (
		.clk                    (clk_0_clk_clk),                                                       //                       clk.clk
		.reset                  (kernel_bridge_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (host_bridge_1_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (host_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (host_bridge_1_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (host_bridge_1_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (host_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (host_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (host_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (host_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (host_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (host_bridge_1_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (host_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (host_bridge_1_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (host_bridge_1_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (host_bridge_1_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (host_bridge_1_m0_byteenable),                                         //                          .byteenable
		.av_read                (host_bridge_1_m0_read),                                               //                          .read
		.av_readdata            (host_bridge_1_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (host_bridge_1_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (host_bridge_1_m0_write),                                              //                          .write
		.av_writedata           (host_bridge_1_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (host_bridge_1_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (kernel_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),               //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                       //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                    //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                   //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                  //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                  //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                       //                         .clken
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (351),
		.PKT_ORI_BURST_SIZE_L      (349),
		.PKT_RESPONSE_STATUS_H     (348),
		.PKT_RESPONSE_STATUS_L     (347),
		.PKT_QOS_H                 (336),
		.PKT_QOS_L                 (336),
		.PKT_DATA_SIDEBAND_H       (334),
		.PKT_DATA_SIDEBAND_L       (334),
		.PKT_ADDR_SIDEBAND_H       (333),
		.PKT_ADDR_SIDEBAND_L       (333),
		.PKT_BURST_TYPE_H          (332),
		.PKT_BURST_TYPE_L          (331),
		.PKT_CACHE_H               (346),
		.PKT_CACHE_L               (343),
		.PKT_THREAD_ID_H           (339),
		.PKT_THREAD_ID_L           (339),
		.PKT_BURST_SIZE_H          (330),
		.PKT_BURST_SIZE_L          (328),
		.PKT_TRANS_EXCLUSIVE       (316),
		.PKT_TRANS_LOCK            (315),
		.PKT_BEGIN_BURST           (335),
		.PKT_PROTECTION_H          (342),
		.PKT_PROTECTION_L          (340),
		.PKT_BURSTWRAP_H           (327),
		.PKT_BURSTWRAP_L           (327),
		.PKT_BYTE_CNT_H            (326),
		.PKT_BYTE_CNT_L            (317),
		.PKT_ADDR_H                (310),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (311),
		.PKT_TRANS_POSTED          (312),
		.PKT_TRANS_WRITE           (313),
		.PKT_TRANS_READ            (314),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (337),
		.PKT_SRC_ID_L              (337),
		.PKT_DEST_ID_H             (338),
		.PKT_DEST_ID_L             (338),
		.ST_DATA_W                 (352),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) kernel_bridge_m0_agent (
		.clk                   (clk_0_clk_clk),                                                       //       clk.clk
		.reset                 (kernel_bridge_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (kernel_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (kernel_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (kernel_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (kernel_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (kernel_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (kernel_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (kernel_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (kernel_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (kernel_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (kernel_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (kernel_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (kernel_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (kernel_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (kernel_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (kernel_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (kernel_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                   //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                    //          .data
		.rp_channel            (rsp_mux_src_channel),                                                 //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                   //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (94),
		.PKT_CACHE_L               (91),
		.PKT_THREAD_ID_H           (87),
		.PKT_THREAD_ID_L           (87),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (64),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (75),
		.PKT_BYTE_CNT_H            (74),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (85),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (86),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) host_bridge_1_m0_agent (
		.clk                   (clk_0_clk_clk),                                                       //       clk.clk
		.reset                 (kernel_bridge_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (host_bridge_1_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (host_bridge_1_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (host_bridge_1_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (host_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (host_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (host_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (host_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (host_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (host_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (host_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (host_bridge_1_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (host_bridge_1_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (host_bridge_1_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (host_bridge_1_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (host_bridge_1_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (host_bridge_1_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (host_bridge_1_m0_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (host_bridge_1_m0_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (host_bridge_1_m0_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (host_bridge_1_m0_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (host_bridge_1_m0_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (host_bridge_1_m0_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (351),
		.PKT_ORI_BURST_SIZE_L      (349),
		.PKT_RESPONSE_STATUS_H     (348),
		.PKT_RESPONSE_STATUS_L     (347),
		.PKT_BURST_SIZE_H          (330),
		.PKT_BURST_SIZE_L          (328),
		.PKT_TRANS_LOCK            (315),
		.PKT_BEGIN_BURST           (335),
		.PKT_PROTECTION_H          (342),
		.PKT_PROTECTION_L          (340),
		.PKT_BURSTWRAP_H           (327),
		.PKT_BURSTWRAP_L           (327),
		.PKT_BYTE_CNT_H            (326),
		.PKT_BYTE_CNT_L            (317),
		.PKT_ADDR_H                (310),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (311),
		.PKT_TRANS_POSTED          (312),
		.PKT_TRANS_WRITE           (313),
		.PKT_TRANS_READ            (314),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (337),
		.PKT_SRC_ID_L              (337),
		.PKT_DEST_ID_H             (338),
		.PKT_DEST_ID_L             (338),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (352),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (kernel_bridge_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (353),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (kernel_bridge_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	onchip_ram_256b_mm_interconnect_0_router router (
		.sink_ready         (kernel_bridge_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (kernel_bridge_m0_agent_cp_valid),                 //          .valid
		.sink_data          (kernel_bridge_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (kernel_bridge_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (kernel_bridge_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (kernel_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	onchip_ram_256b_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (host_bridge_1_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (host_bridge_1_m0_agent_cp_valid),                 //          .valid
		.sink_data          (host_bridge_1_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (host_bridge_1_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (host_bridge_1_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (kernel_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                            //       src.ready
		.src_valid          (router_001_src_valid),                            //          .valid
		.src_data           (router_001_src_data),                             //          .data
		.src_channel        (router_001_src_channel),                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                       //          .endofpacket
	);

	onchip_ram_256b_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),              //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),               //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (kernel_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (310),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (335),
		.PKT_BYTE_CNT_H            (326),
		.PKT_BYTE_CNT_L            (317),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (330),
		.PKT_BURST_SIZE_L          (328),
		.PKT_BURST_TYPE_H          (332),
		.PKT_BURST_TYPE_L          (331),
		.PKT_BURSTWRAP_H           (327),
		.PKT_BURSTWRAP_L           (327),
		.PKT_TRANS_COMPRESSED_READ (311),
		.PKT_TRANS_WRITE           (313),
		.PKT_TRANS_READ            (314),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (352),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (322),
		.OUT_BURSTWRAP_H           (327),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (kernel_bridge_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	onchip_ram_256b_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (kernel_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                //      sink.ready
		.sink_channel       (router_src_channel),                              //          .channel
		.sink_data          (router_src_data),                                 //          .data
		.sink_startofpacket (router_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_src_valid),                                //          .valid
		.src0_ready         (cmd_demux_src0_ready),                            //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                            //          .valid
		.src0_data          (cmd_demux_src0_data),                             //          .data
		.src0_channel       (cmd_demux_src0_channel),                          //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                       //          .endofpacket
	);

	onchip_ram_256b_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (kernel_bridge_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (host_bridge_1_m0_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (host_bridge_1_m0_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (host_bridge_1_m0_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (host_bridge_1_m0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (host_bridge_1_m0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (host_bridge_1_m0_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                             //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                             //          .valid
		.src0_data          (cmd_demux_001_src0_data),                              //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                           //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                        //          .endofpacket
	);

	onchip_ram_256b_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (kernel_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                               //          .valid
		.src_data            (cmd_mux_src_data),                                //          .data
		.src_channel         (cmd_mux_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                   //          .endofpacket
	);

	onchip_ram_256b_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (kernel_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                            //      sink.ready
		.sink_channel       (router_002_src_channel),                          //          .channel
		.sink_data          (router_002_src_data),                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_src0_data),                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_src1_data),                             //          .data
		.src1_channel       (rsp_demux_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                       //          .endofpacket
	);

	onchip_ram_256b_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (kernel_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_src_valid),                               //          .valid
		.src_data            (rsp_mux_src_data),                                //          .data
		.src_channel         (rsp_mux_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                            //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                            //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                          //          .channel
		.sink0_data          (rsp_demux_src0_data),                             //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                       //          .endofpacket
	);

	onchip_ram_256b_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (kernel_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                           //          .valid
		.src_data            (rsp_mux_001_src_data),                            //          .data
		.src_channel         (rsp_mux_001_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                            //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                            //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                          //          .channel
		.sink0_data          (rsp_demux_src1_data),                             //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (310),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (326),
		.IN_PKT_BYTE_CNT_L             (317),
		.IN_PKT_TRANS_COMPRESSED_READ  (311),
		.IN_PKT_TRANS_WRITE            (313),
		.IN_PKT_BURSTWRAP_H            (327),
		.IN_PKT_BURSTWRAP_L            (327),
		.IN_PKT_BURST_SIZE_H           (330),
		.IN_PKT_BURST_SIZE_L           (328),
		.IN_PKT_RESPONSE_STATUS_H      (348),
		.IN_PKT_RESPONSE_STATUS_L      (347),
		.IN_PKT_TRANS_EXCLUSIVE        (316),
		.IN_PKT_BURST_TYPE_H           (332),
		.IN_PKT_BURST_TYPE_L           (331),
		.IN_PKT_ORI_BURST_SIZE_L       (349),
		.IN_PKT_ORI_BURST_SIZE_H       (351),
		.IN_ST_DATA_W                  (352),
		.OUT_PKT_ADDR_H                (58),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (74),
		.OUT_PKT_BYTE_CNT_L            (65),
		.OUT_PKT_TRANS_COMPRESSED_READ (59),
		.OUT_PKT_BURST_SIZE_H          (78),
		.OUT_PKT_BURST_SIZE_L          (76),
		.OUT_PKT_RESPONSE_STATUS_H     (96),
		.OUT_PKT_RESPONSE_STATUS_L     (95),
		.OUT_PKT_TRANS_EXCLUSIVE       (64),
		.OUT_PKT_BURST_TYPE_H          (80),
		.OUT_PKT_BURST_TYPE_L          (79),
		.OUT_PKT_ORI_BURST_SIZE_L      (97),
		.OUT_PKT_ORI_BURST_SIZE_H      (99),
		.OUT_ST_DATA_W                 (100),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) host_bridge_1_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                        //       clk.clk
		.reset                (kernel_bridge_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                //      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                              //          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                //          .ready
		.in_data              (rsp_mux_001_src_data),                                 //          .data
		.out_endofpacket      (host_bridge_1_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (host_bridge_1_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (host_bridge_1_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (host_bridge_1_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (host_bridge_1_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (host_bridge_1_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (58),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (74),
		.IN_PKT_BYTE_CNT_L             (65),
		.IN_PKT_TRANS_COMPRESSED_READ  (59),
		.IN_PKT_TRANS_WRITE            (61),
		.IN_PKT_BURSTWRAP_H            (75),
		.IN_PKT_BURSTWRAP_L            (75),
		.IN_PKT_BURST_SIZE_H           (78),
		.IN_PKT_BURST_SIZE_L           (76),
		.IN_PKT_RESPONSE_STATUS_H      (96),
		.IN_PKT_RESPONSE_STATUS_L      (95),
		.IN_PKT_TRANS_EXCLUSIVE        (64),
		.IN_PKT_BURST_TYPE_H           (80),
		.IN_PKT_BURST_TYPE_L           (79),
		.IN_PKT_ORI_BURST_SIZE_L       (97),
		.IN_PKT_ORI_BURST_SIZE_H       (99),
		.IN_ST_DATA_W                  (100),
		.OUT_PKT_ADDR_H                (310),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (326),
		.OUT_PKT_BYTE_CNT_L            (317),
		.OUT_PKT_TRANS_COMPRESSED_READ (311),
		.OUT_PKT_BURST_SIZE_H          (330),
		.OUT_PKT_BURST_SIZE_L          (328),
		.OUT_PKT_RESPONSE_STATUS_H     (348),
		.OUT_PKT_RESPONSE_STATUS_L     (347),
		.OUT_PKT_TRANS_EXCLUSIVE       (316),
		.OUT_PKT_BURST_TYPE_H          (332),
		.OUT_PKT_BURST_TYPE_L          (331),
		.OUT_PKT_ORI_BURST_SIZE_L      (349),
		.OUT_PKT_ORI_BURST_SIZE_H      (351),
		.OUT_ST_DATA_W                 (352),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) host_bridge_1_m0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                        //       clk.clk
		.reset                (kernel_bridge_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_001_src_valid),                                 //      sink.valid
		.in_channel           (router_001_src_channel),                               //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                           //          .endofpacket
		.in_ready             (router_001_src_ready),                                 //          .ready
		.in_data              (router_001_src_data),                                  //          .data
		.out_endofpacket      (host_bridge_1_m0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (host_bridge_1_m0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (host_bridge_1_m0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (host_bridge_1_m0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (host_bridge_1_m0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (host_bridge_1_m0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated)
	);

	onchip_ram_256b_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (kernel_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                    //         .error
	);

endmodule
